
###################################################################
[General]

network = wirelesstcpclientserver.customClientServer

description = "client <---> server"
seed-set = ${repetition}

output-vector-file = "${resultdir}/${configname}-${runnumber}picou.vec"
output-scalar-file = "${resultdir}/${configname}-${runnumber}picou.sca"

**.result-recording-modes = all
**.channel.**.result-recording-modes = stats


**.client.mobility.typename = "StationaryMobility"
**.server.mobility.typename = "StationaryMobility"
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m


*.client.mobility.initialX = 0m
*.client.mobility.initialY = 0m
*.client.mobility.initialZ = 0m


*.server.mobility.initialX = 5m
*.server.mobility.initialY = 0m
*.server.mobility.initialZ = 0m


## tcp apps
**.numApps = 1


**.client*.app[*].typename = "CustomTcpSessionApp"
**.client*.app[0].active = true
**.client*.app[0].localPort = -1
**.client*.app[0].connectAddress = "server"
**.client*.app[0].connectPort = 8080
**.client*.app[0].sendScript = ""
**.client*.app[0].packetsCount = 1000
**.client*.app[0].dataRate = ${0.5Mbps,1Mbps,2Mbps,4Mbps,8Mbps ,16Mbps , 32Mbps,64Mbps,128Mbps,256Mbps,512Mbps}
**.client*.app[0].numBytes = 1024B
**.client*.app[0].tOpen = 0s
**.client*.app[0].tSend = 0s
**.client*.app[0].tClose = 1000s


**.server*.app[*].typename = "CustomTcpEchoApp"
**.server*.app[0].echoDelay = 0s
**.server*.app[0].echoFactor = 1
**.server*.app[0].localPort = 8080

**.app[*].dataTransferMode = "bytestream" 


# default TCP implementation
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 10240
**.tcp.nagleEnabled = false


**.wlan[*].bitrate= 11Mbps
**.tcp.msl = 0s


**.wlan[0].typename = "AckingWirelessInterface"
**.wlan[0].mac.useAck = true
**.wlan[0].mac.typename = "CsmaCaMac"

**.wlan*.opMode = "b"
**.wlan[0].radio.transmitter.communicationRange = 500m


#**.result-recording-modes = +sum 
#**.result-recording-modes = +count
**.channel.**.result-recording-modes =count, sum , histogram,stats,max,min,mean

# pcap
**.server.hasPcapRecorder = true
**.server.pcapRecorder.pcapFile = "results/server.pcap"
**.client.hasPcapRecorder = true
**.client.pcapRecorder.pcapFile = "results/client.pcap"
**.pcapRecorder.pcapLinkType = 204     # Ppp

# pcap
**.server.hasPcapRecorder = true
**.server.pcapRecorder.pcapFile = "results/server.pcap"
**.client.hasPcapRecorder = true
**.client.pcapRecorder.pcapFile = "results/client.pcap"
**.pcapRecorder.pcapLinkType = 204     # Ppp


**.queue.typename = "DropTailQueue"
**.queue.dataQueue.typename = "DropTailQueue"
**.queue.packetCapacity = 1000 
**.queue.dataQueue.packetCapacity = 1000
**.queue.dataCapacity = 1024000Byte
**.queue.dataQueue.dataCapacity =1024000Byte





*.configurator.config=xml("<config><interface hosts='*' address='192.168.1.x' netmask='255.255.255.0'/></config>")
# -*- coding: utf-8 -*-
"""Graphs2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16WZuLQSUD7zbrX4UjCue1jOGhfiKC79_
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNetclientsidLossPPP= [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
OMNetserversidLossPPP = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
OMNetserversidLossCSMA = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
OMNetclientsidLossCSMA = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
plt.plot(x, OMNetclientsidLossPPP, 's-b')
plt.plot(x, OMNetclientsidLossPPP, 'o--r')
plt.plot(x, OMNetserversidLossCSMA, marker='D')
plt.plot(x, OMNetserversidLossCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Packet Loss Ratio (%)  ')
plt.title("OMNET++ packet loss ratio (%)")
plt.legend(['OMNET++ client packet loss ratio full-duplex ', 'OMNET++ server packet loss ratio full-duplex' , 'OMNET++ client packet loss ratio half-duplex ', 'OMNET++ server packet loss ratio half-duplex']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3clientsidLossPPP= [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,7.7 ,41.8 ,58.7]
NS3serversidLossPPP = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
NS3clientsidLossCSMA = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 32.7 ,49.4 ,64.4 ,69.5]
NS3serversidLossCSMA = [0 ,0 , 0 ,0 , 0 ,0 ,0 , 0 ,0 ,0 ,0]
plt.plot(x, NS3clientsidLossPPP, 's-b')
plt.plot(x, NS3serversidLossPPP , 'o--r')
plt.plot(x, NS3clientsidLossCSMA, marker='D')
plt.plot(x, NS3serversidLossCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Packet Loss Ratio (%)  ')
plt.title("NS3 packet loss ratio (%) ")
plt.legend(['NS3 client packet loss ratio full-duplex ', 'NS3 server packet loss ratio full-duplex' , 'NS3 client packet loss ratio half-duplex ', 'NS3 server packet loss ratio half-duplex']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3bytessentPPP = [512000 ,512000 , 512000 ,512000 , 512000 ,512000 ,512000 , 512000 ,512000 ,512000 ,512000] 
NS3recivedbytesPPP = [564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,542720 ,342812 ,243244] 
NS3bytessentCSMA = [512000 ,512000 , 512000 ,512000 , 512000 ,512000 ,512000 , 512000 ,512000 ,512000 ,512000]
NS3bytesrecivedCSMA =[ 564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564116 ,303456 ,214728 ,181956]
plt.plot(x, NS3bytessentPPP , 's--b')
plt.plot(x, NS3recivedbytesPPP, 'o--r')
plt.plot(x, NS3bytessentCSMA , marker='D')
plt.plot(x, NS3bytesrecivedCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Number of bytes (bytes)  ')
plt.title(" NS3 number of bytes sent and received client-side (from application layer to physical layer )  ")
plt.legend(['sent bytes full-duplex application layer ', 'received bytes full-duplex physical layer ', 'sent bytes half-duplex application layer ', 'received bytes half-duplex physical layer ' ]);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3physendbytesclientsidePPP= [564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,542720 ,342812 ,243244] 
NS3phyrecivedbytesserversidePPP = [564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,542720 ,342812 ,243244] 
NS3physendbytesclientsideCSMA = [ 564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564116 ,303456 ,214728 ,181956]
NS3phyrecivedbytesserversideCSMA =[ 564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564252 ,564116 ,303456 ,214728 ,181956]
plt.plot(x, NS3physendbytesclientsidePPP, 's--b')
plt.plot(x, NS3phyrecivedbytesserversidePPP, 'o--r')
plt.plot(x, NS3physendbytesclientsideCSMA, marker='D')
plt.plot(x, NS3phyrecivedbytesserversideCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Number of bytes (bytes)  ')
plt.title(" NS3 total number of bytes transmitted into the channel  ")
plt.legend(['client sent bytes full-duplex physical layer ', 'server received bytes full-duplex physical layer ', 'client sent bytes half-duplex physical layer ', 'server received bytes half-duplex physical layer ' ]);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3EndtoEntdDelayAppPPP= [4.191972524	, 2.146020524	 ,1.123044524	 , 0.611556524	 ,0.355812524	 ,0.227940524	 ,0.164004524	 , 0.132036524	 , 0.121731071	 , 0.113740876	 , 0.109777901	]
NS3EndtoEntdDelayAppCSMA = [4.191974945	,2.146022945	,1.123046945	,0.611558945	,0.355814945	,0.227942945	,0.164006945	,0.146888015	 ,0.129095093	 ,0.121176874	 ,0.118304126]
plt.plot(x, NS3EndtoEntdDelayAppPPP, 's-b')
plt.plot(x, NS3EndtoEntdDelayAppCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' End-to-End Delay (s)  ')
plt.title(" NS3 End-to-End Delay (s)  ")
plt.legend([ ' NS3 End-to-End Delay full-duplex ', ' NS3 End-to-End Delay half-duplex ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETEndtoEntdDelayAppPPP=  [4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,4.70019E-05 ,0.004536338 ,0.016697171 ,0.020698553]
OMNETEndtoEntdDelayAppCSMA = [5.0486E-05 ,5.04917E-05 ,5.0486E-05 ,5.04881E-05 ,5.04932E-05 ,5.04883E-05 ,5.0486E-05 ,0.02647792 ,0.03389712 ,0.03676107 ,0.03770814]
plt.plot(x, OMNETEndtoEntdDelayAppPPP, 's-b')
plt.plot(x, OMNETEndtoEntdDelayAppCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' End-to-End Delay (s)  ')
plt.title(" OMNET++ End-to-End Delay (s)  ")
plt.legend([ ' OMNET++ End-to-End Delay full-duplex ', ' OMNET++ End-to-End Delay half-duplex ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3clientServerJitterPPP = [0.008183804,0.0040919,0.002045948,0.001022972,0.000511484,0.00025574,0.000127868, 0.0000639317 , 0.0000470154 , 0.0000470469 , 0.0000469811 ] 
NS3ServerClientJitterPPP = [ 0.008183808 , 0.004091904 , 0.002045952 , 0.001022976 , 0.000511488 , 0.000255744 , 0.000127872 , 0.000063936 ,0.000047006 , 0.000047032 ,0.000046966 ] 
NS3clientServerJitterCSMA = [0.008183801 ,0.004091897 ,0.002045945 ,0.001022969 ,0.000511481 ,0.000255737 ,0.000127865 ,0.000136471 ,0.000111998 ,0.000112527 ,0.00011417]
NS3ServerClientJitterCSMA =[0.008183808 ,0.004091904 ,0.002045952 ,0.001022976 ,0.000511488 ,0.000255744 ,0.000127872 ,0.0000808258 ,0.0000984256 ,0.000105463 ,0.00010108]
plt.plot(x, NS3clientServerJitterPPP , 's--b')
plt.plot(x, NS3ServerClientJitterPPP, 'o--r')
plt.plot(x, NS3clientServerJitterCSMA , marker='D')
plt.plot(x, NS3ServerClientJitterCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' End to end jitter (s)  ')
plt.title(" NS3 end to end jitter full-duplex and half-duplex  ")
plt.legend(['client to server jitter full-duplex ', 'server to client jitter full-duplex ', 'client to server jitter half-duplex ', 'server to client jitter half-duplex ' ]);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETclientServerJitterPPP = [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0.0000000855145 ,0.0000172305 ,0.0000286448 ,0.000000823938  ] 
OMNETServerClientJitterPPP = [ 0.00000000376 ,0.00000000376 ,0.00000000376 ,0.00000000376 ,0.00000000376 ,0.00000000376 ,0.00000000376 ,0.00000000376 ,0.0000668336 ,0.0000624269 ,0.0000548558  ] 
OMNETclientServerJitterCSMA=[0.00000000416 ,0.00000001568 ,0.00000000416 ,0.00000000848 ,0.00000001872 ,0.0000000088 , 0.00000000416 ,0.00013743100 ,0.00026311400 ,0.00015883400 ,0.00016041700]
OMNETServerClientJitterCSMA =[7.68E-09 ,7.68E-09 ,7.68E-09 ,7.68E-09 ,7.68E-09 ,7.68E-09 ,7.68E-09 ,0.000208581 ,0.000181621 ,0.000174618 ,0.000159342 ]
plt.plot(x, OMNETclientServerJitterPPP , 's--b')
plt.plot(x, OMNETServerClientJitterPPP, 'o--r')
plt.plot(x, OMNETclientServerJitterCSMA , marker='D')
plt.plot(x, OMNETServerClientJitterCSMA, marker='x')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' End to end jitter (s)  ')
plt.title("  OMNET++ end to end jitter full-duplex and half-duplex  ")
plt.legend(['client to server jitter full-duplex ', 'server to client jitter full-duplex ', 'client to server jitter half-duplex ', 'server to client jitter half-duplex ' ]);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3ThroughputClientSidePPP= [500.5005005005, 1001.0010010010, 2002.0020020020, 4004.0040040040, 8008.0080080080, 16016.0160160160, 32032.0320320320, 64064.0640640641, 128128.1281281281, 256256.2562562563, 512512.5125125126]
NS3ThroughputServerSidePPP = [500, 1001, 2002, 4004, 8008, 16016, 32032, 64064, 90914, 90980, 91013] 
plt.plot(x, NS3ThroughputClientSidePPP, 's-b')
plt.plot(x, NS3ThroughputServerSidePPP, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" NS3 throughput applcation layer full-duplex  ")
plt.legend(['NS3 throughput client side  ', 'NS3 throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3ThroughputClientSidePPP= [544.3792219968, 1075.7829352124, 2101.4762949649, 4015.9650678867, 7375.6511497786, 12679.2851695415, 19797.0507578268, 27518.3492950529, 30252.7933447367, 21509.7689573117, 16276.3029029845,]
NS3ThroughputServerSidePPP = [544.2595481933, 1075.5482228551, 2101.0245205898, 4015.1256946842, 7374.1868502706, 12676.9776515614, 19793.8873432020, 27518.3462094661, 30188.6219962164, 21457.0040330848, 16225.4589305755,]
plt.plot(x, NS3ThroughputClientSidePPP, 's-b')
plt.plot(x, NS3ThroughputServerSidePPP, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" NS3 throughput physical layer full-duplex  ")
plt.legend(['NS3 throughput client side  ', 'NS3 throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3ThroughputClientSideCSMA= [500.5005005005, 1001.0010010010, 2002.0020020020, 4004.0040040040, 8008.0080080080, 16016.0160160160, 32032.0320320320, 64064.0640640641, 128128.1281281281, 256256.2562562563, 512512.5125125126]
NS3ThroughputServerSideCSMA = [500.5005005 ,1001.001001 ,2002.002002 ,4004.004004 ,8008.008008 ,16016.01602 ,32032.03203 ,52819.70611 ,43506.78348 ,40569.27997 ,42249.43139]
plt.plot(x, NS3ThroughputClientSideCSMA, 's-b')
plt.plot(x, NS3ThroughputServerSideCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" NS3 throughput application layer half-duplex ")
plt.legend(['NS3 throughput client side  ', 'NS3 throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3ThroughputClientSideCSMA= [544.3788412211, 1075.7814481981, 2101.4706206393, 4015.9443452960, 7375.5812520509, 12679.0786082678, 19796.5471918438, 23506.5277137742, 15426.1427113840, 12172.4116550537, 10739.4877649629,]
NS3ThroughputServerSideCSMA = [544.8517781812, 1077.8634820106, 2109.8775997451, 4047.5821270400, 7484.4112508290, 13006.2644111996, 20608.5630584196, 18291.1232432211, 16549.6174942347, 13267.2407755130, 11873.1850036885 ,]
plt.plot(x, NS3ThroughputClientSideCSMA, 's-b')
plt.plot(x, NS3ThroughputServerSideCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" NS3 throughput physical layer half-duplex   ")
plt.legend(['NS3 throughput client side  ', 'NS3 throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETThroughputClientSideCSMA= [620.05814794891 ,1240.0889606257,2480.0774113203, 4959.6302889294, 9917.5367885549, 19827.834926835 ,39628.776969428, 30884.255545878, 30302.497702624,30869.076050027,32500.778910321]
OMNETThroughputServerSideCSMA = [619.99558690485, 1239.9638412956 ,2479.827182801,4959.129884814 ,9916.5361542465 ,19825.834388565 ,39624.778606258,30880.907524296 ,30319.034086211 ,30865.976375638,32497.515390809]
plt.plot(x, OMNETThroughputClientSideCSMA, 's-b')
plt.plot(x, OMNETThroughputServerSideCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" OMNET++ throughput physical layer half-duplex   ")
plt.legend(['OMNET++ throughput client side  ', 'OMNET++ throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETThroughputClientSideCSMA= [500.501 ,1001 ,2002 ,4004 ,8008.01 ,16016 ,32032 ,64064.1 ,128128 ,256256 ,512513]
OMNETThroughputServerSideCSMA = [ 500.501 ,1001 ,2002.01 ,4004.03 ,8008.13 ,16016.5 ,32034 ,24600.2 ,24393.9 ,25021 ,26296]
plt.plot(x, OMNETThroughputClientSideCSMA, 's-b')
plt.plot(x, OMNETThroughputServerSideCSMA, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" OMNET++ throughput application layer half-duplex ")
plt.legend(['OMNET++ throughput client side  ', 'OMNET++ throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETThroughputClientSidePPP= [592.56895237304 ,1185.1219060202, 2370.1798197287 ,4740.1036909412, 9479.1837536343 ,18954.274320309 ,37892.186493026 ,75724.879806041 ,99779.939121845 ,99346.010435101 ,99346.010435101]
OMNETThroughputServerSidePPP = [592.52330979926 ,1185.0312244569 ,2370.0008707474 ,4739.7554480269, 9478.5258757369 ,18953.112898198 ,37890.480200084 ,75723.927552906, 99783.288646992 , 99366.23904268 ,99366.23904268]
plt.plot(x, OMNETThroughputClientSidePPP, 's-b')
plt.plot(x, OMNETThroughputServerSidePPP, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" OMNET++ throughput physical layer full-duplex  ")
plt.legend(['OMNET++  throughput client side  ', 'OMNET++  throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETThroughputClientSidePPP = [500.501 ,1001 ,2002 ,4004 ,8008.01 ,16016 ,32032 ,64064.1 ,128128 ,256256 ,512513]
OMNETThroughputServerSidePPP= [500.501 ,1001 ,2002.01 , 4004.02 ,8008.07 ,16016.3 ,32033 ,64067.8 ,82629.3 ,84370 ,84370]  
plt.plot(x, OMNETThroughputClientSidePPP, 's-b')
plt.plot(x, OMNETThroughputServerSidePPP, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel(' Throughput (Kbps)  ')
plt.title(" OMNET++ throughput applcation layer full-duplex  ")
plt.legend(['OMNET++ throughput client side  ', 'OMNET++ throughput server side ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
NS3ClientNumberofcollisions= [6 ,6 ,6 ,6 ,6 ,6 ,6 ,239 ,138 ,106 ,93] 
NS3ServerNumberofcollisions = [1003 ,1003 ,1003 ,1003 ,1003 ,1003 ,1003 ,254 ,137 ,104 ,93]
plt.plot(x, NS3ClientNumberofcollisions, 's-b')
plt.plot(x, NS3ServerNumberofcollisions, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel('Network collisions ')
plt.title("Network collisions ")
plt.title(" NS3 collisions  ")
plt.legend([ 'NS3  client side collisions ', 'NS3 server side  collisions']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETClientNumberofcollisions= [5 ,5 ,4 ,5 ,4 ,4 ,4 ,1357 ,1313 ,1375 ,1263]
OMNETClientNumberofcollisions = [5 ,5 ,4 ,5 ,4 ,4 ,4 ,1357 ,1313 ,1375 ,1263]
plt.plot(x, OMNETClientNumberofcollisions, 's-b')
plt.plot(x, OMNETClientNumberofcollisions, 'o--r')
plt.xlabel('Client data rate (Mpbs)')
plt.ylabel('Network collisions ')
plt.title("OMNET++ collisions ")
plt.title(" OMNET++ collisions  ")
plt.legend(['OMNET++  client side collisions ', 'OMNET++  server side  collisions']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNetSimulationTimeCSMA= [8.18400664 ,4.09209352 ,2.04612968 ,1.02317304 ,0.51167544 ,0.25593112 ,0.1280524 ,0.16726296 ,0.1693236 ,0.16517864 ,0.15688584]
NS3SimulationTimePPP= [8.2839029220 ,4.1919989220 ,2.1460469220 ,1.1230709220 ,0.6115829220 ,0.3558389220 ,0.2279669220 ,0.1919466820 ,0.1573303220 ,0.1410566820 ,0.1354813220]
OMNetSimulationTimePPP= [8.18392264 , 4.09201864 ,2.04606664 ,1.02309064 ,0.51160264 ,0.25585864 ,0.12798664 ,0.06405064 ,0.04980856 ,0.049008 ,0.049008]
NS3SimulationTimeCSMA= [8.2838993620 ,4.1919953620 ,2.1460433620 ,1.1230673620 ,0.6115793620 ,0.3558353620 ,0.2279633620 ,0.1640273620 ,0.1434908820 ,0.1274769620 ,0.1194988820]
plt.plot(x, OMNetSimulationTimeCSMA, 's-b')
plt.plot(x, NS3SimulationTimePPP, 'o--r')
plt.plot(x, OMNetSimulationTimePPP, marker='D')
plt.plot(x, NS3SimulationTimeCSMA, marker='x')
plt.xlabel('Client data rate (Mbps)')
plt.ylabel('Simulation length (s)')
plt.title("Simulation length ")
plt.legend(['OMNET++ half-duplex ', 'NS3 full-duplex', 'OMNET++ full-duplex', 'NS3 half-duplex ']);

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
# numerical values, spacing according to value, gives a curve
x = np.array([0.5,1,2,4,8,16,32,64,128,256, 521]) 
# text values, spaced evenly, gives a straight line
x = np.array(['o.5','1','2','4','8','16','32','64','128','256', '512'])
OMNETHalfDuplexEventsNumber= [49165 ,49165 ,49153 ,49165 ,49154 ,49155 ,49153 ,65729 ,63761 ,63028 , 61617]
NS3THalfDuplexEventsNumber = [22196 ,22196 ,22196 ,22196 ,22196 ,22196 ,22196 ,16999 ,10600 ,7849 ,6903]
OMNETfullDuplexEventsNumber =  [29056 ,29056 ,29056 ,29056 ,29056 ,29056 ,29056 ,29069 ,33362 , 29734 ,29734]
NS3TfullDuplexEventsNumber = [15136 ,15136 ,15136 ,15136 ,15136 ,15136 ,15136 ,13137 ,11332 ,7580 ,5725]
plt.plot(x, OMNETHalfDuplexEventsNumber, 's-b')
plt.plot(x, NS3THalfDuplexEventsNumber, 'o--r')
plt.plot(x, OMNETfullDuplexEventsNumber, marker='x')
plt.plot(x, NS3TfullDuplexEventsNumber, marker='o')
plt.xlabel('client data rate (Mbps)')
plt.ylabel('Simulator events count')
plt.title("Simulator events count ")
plt.legend(['OMNET++ half-duplex', 'NS3 half-duplex', 'OMNET++ full-duplex', 'NS3 full-duplex']);